## Put comments here that give an overall description of what your functions do
# 1. Special "matrix" with inverse caching.
# 2. Get inverse from cache or re-compute it

## Write a short comment describing this function
# This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
  inverseOfX = solve(x)
  
  m <- NULL
  
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  
  get <- function() x
  setInverse <- function(inverseOfX) m <<- inverseOfX
  getInverse <- function() m
  
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

## Write a short comment describing this function
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
  ## Return a matrix that is the inverse of 'x'
  inverseOfX <- x$getInverse()
  if(!is.null(inverseOfX)) {
    return(inverseOfX)
  }
  
  data <- x$get()
  inverseOfX <- solve(data)
  x$setInverse(inverseOfX)
  return(inverseOfX)
}

# Testing the functions
orimat <- matrix(rnorm(9), 3, 3)
x <- makeCacheMatrix()
set.seed(1)
x$set(orimat)
cacheSolve(x)
cacheSolve(x) #getting cached data
